{-
  Contract receives internal message with text comment (https://ton.org/docs/develop/smart-contracts/guidelines/internal-messages) 
    which contains algebraic equation containing numbers in integer representation and operations `(+-*/)`.
  All values (including intermediate) fit 256 bit. Contract should respond (coins = 0, mode = 64) with correct answer encoded as text comment back.
  It is guaranteed that all tests contain a valid algebraic equations.
  Division result should be rounded down. It is guaranteed that tests do not contain division by zero.
  -}

{-
#DEBUG#: s0 = 40 (
#DEBUG#: s0 = 41 )
#DEBUG#: s0 = 42 *
#DEBUG#: s0 = 43 +
#DEBUG#: s0 = 45 -
#DEBUG#: s0 = 47 /
space: 32
48 - 57 == 0 - 9
-}

forall X -> X back(tuple) asm "LAST";
forall X -> (tuple, X) ~pop_back(tuple t) asm "TPOP";
int tlen(tuple t) asm "TLEN";
builder store_sliceF(builder b, slice s) asm(s b) "STSLICE";

builder uint_to_string(builder b, int val) asm ""
  "ZERO"
  "SWAP" "TRUE"
  "WHILE:<{"
  "}>DO<{"
    "10 PUSHINT" "DIVMOD"
    "48 PUSHINT" "ADD"
    "3 ROLLREV"
    "SWAP" "INC"
    "SWAP"
    "DUP" "0 NEQINT"
  "}>"
  "DROP"
  "REPEAT:<{"
    "8 STU"
  "}>"
;

{-
int isdigit(int ch) inline {
  return ch >= 48;
  ;;return (ch >= 48) & (ch <= 57);
}
-}

(int, int) process(int op, int result, int last_num, int current_num) inline {
  if (op == 43) {
    result += last_num;
    last_num = current_num;
  } elseif (op == 45) {
    result += last_num;
    last_num = - current_num;
  } elseif (op == 42) {
    last_num *= current_num;
  } elseif (op == 47) {
    last_num /= current_num;
  }
  return (result, last_num);
}


(slice, int) get_next_char(slice in_msg_body) inline {
  if (in_msg_body.slice_bits()) {
    int ch = in_msg_body~load_uint(8);
    return (in_msg_body, ch);
  }
  if (in_msg_body.slice_refs()) {
    in_msg_body = in_msg_body.preload_ref().begin_parse();
    int ch = in_msg_body~load_uint(8);
    return (in_msg_body, ch);
  }
  return (in_msg_body, 0);
}

;;forall X -> tuple tpush(tuple t, X value) asm "TPUSH";
;;forall X, Y, Z -> [X, Y, Z] triple(X x, Y y, Z z) asm "TRIPLE";

;;forall X, Y, Z -> tuple push_triple(tuple t, X x, Y y, Z z) asm "TRIPLE TPUSH";
builder store_uint_139(builder b, int x) asm "139 STUR";
;;builder store_uint_139_(builder b, int x) asm (x b) "139 STU";
builder _store_builder(builder to, builder what) asm(what to) "STB";

;; testable
() recv_internal (cell message, slice in_msg_body) {
  (int op, int result, int last_num, int current_num) = (43, 0, 0, 0);
  tuple st = empty_tuple();
  in_msg_body~skip_bits(32); ;; 0

  do {
    int ch = in_msg_body~get_next_char();

    if (ch >= 48) {  ;; isdigit
      current_num = current_num * 10 + (ch - 48);
    } elseif (ch != 40) { ;; (
      (result, last_num) = process(op, result, last_num, current_num);
      if (ch == 41) {  ;; )
        current_num = result + last_num;
        (result, last_num, op) = untriple(st~pop_back());
        (result, last_num) = process(op, result, last_num, current_num);
      }
      (op, current_num) = (ch, 0);
    } else {
      st~tpush([result, last_num, op]);
      (op, current_num, last_num, result) = (43, 0, 0, 0);
    }
  } until (ch == 0);

  result += last_num;
  ;;result~dump();
  builder result_builder = begin_cell();

  if (result < 0) {
    result = - result;
    result_builder = result_builder.store_uint(45, 8);
  }
  result_builder = uint_to_string(result_builder, result);
  ;;slice ans = result_builder.end_cell().begin_parse();

  slice cs = message.begin_parse();
  cs~skip_bits(4);  ;; int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
  send_raw_message(
    begin_cell()
      .store_uint(0x18, 6)
      .store_sliceF(cs~load_msg_addr())
      .store_grams(0)
      .store_uint_139(0)
      ;;.store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 32)
      ;;.store_uint(0, 32)
      ._store_builder(result_builder)
    .end_cell(), 64);
}
