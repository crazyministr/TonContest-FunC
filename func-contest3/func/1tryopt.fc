{-
  In TON there is a limit on the size of the external message which can be sent equal to 64 kB. 
  Sometimes it is necessary to send a larger message; it requires the onchain construction of one message from multiple smaller parts. 
  Your task is to create such construction contract.
  In particular, a contestant needs to develop a FunC contract with two features:
    a) it has get_method "decomposite" for decomposition of large cell to parts:
        it accepts 1 cell (number_of_bits<1000000, number_of_cells<4000 , depth<256) and 1 address 
        and returns tuple of cells (each of which has less than 1000 distinct cells and 40000 bits total), 
        those cells will be transformed to slice and sent as internal message body to the contract.
    b) recv_internal should handle those internal messages from get-method described above and upon receiving last one, 
    send initial large cell to the address (coins amount 0, mode 0). 
    For simplicity, it is guaranteed that messages will be sent exactly in the order in which they were in decomposite output 
    and no other messages will be sent in between.
  Note, that initial state of contract storage will be empty cell: cell with zero bits and refs.
-}

int tlen(tuple t) asm "TLEN";
forall X -> (tuple, X) ~pop_back(tuple t) asm "TPOP";
forall X -> X back(tuple) asm "LAST";
(cell, int) custom::udict_get_ref?(cell dict, int key_len, int index) asm(index dict key_len) "DICTUGETREF" "NULLSWAPIFNOT";

builder store_sliceF(builder b, slice s) asm(s b) "STSLICE";
;;(cell, int) preload_dictQ (slice s) asm "PLDDICTQ" "NULLSWAPIFNOT";
builder _store_builder(builder to, builder what) asm(what to) "STB";
builder _store_builder_ref(builder to, builder what) asm(what to) "STBREF";

builder store_uint_107(builder b, int x) asm "107 STUR";
() dump_str (slice str) impure asm "STRDUMP" "DROP";

cell load_data() inline {
  slice ds = get_data().begin_parse();
  if (ds.slice_bits()) {
    return ds.preload_dict();
  }
  return new_dict();
}

;; testable
() recv_internal (slice body) impure {
  int end? = body~load_uint(1);

  if (end?) {  ;; last cell
    cell data_dict = load_data();
    (cell big_cell, _) = data_dict.custom::udict_get_ref?(16, body~load_uint(16));
    send_raw_message(
      begin_cell()
        .store_uint(0x18, 6)
        .store_sliceF(body)
        .store_grams(0)
        .store_uint_107(1)
        ;;.store_uint(0, 1 + 4 + 4 + 64 + 32 + 1)
        ;;.store_uint(1, 1)
        .store_ref(big_cell)
      .end_cell(), 0);
      return ();
  }

  cell data_dict = load_data();
  cell chunk_dict = body.preload_dict();

  ;;int real_index = -1;
  ;;dump_str("---");
  do {
    var (real_index, cs, f) = chunk_dict~udict::delete_get_min(16);
    ;;real_index~dump(); f~dump();
    if (f) {
      slice info = cs~load_ref().begin_parse();
      int fake_index = info~load_uint(16);
      ;;fake_index~dump();
      ;;dump_str("---");

      cell result = null();
      if (real_index == fake_index) {
        builder node = begin_cell();

        repeat (info.slice_bits() / 16) {
          int child_ref_index = info~load_uint(16);
          (cell child, _) = data_dict.custom::udict_get_ref?(16, child_ref_index);
          node = node.store_ref(child);
        }
        node = node.store_sliceF(cs.preload_ref().begin_parse());
        result = node.end_cell();
      } else {
        (result, _) = data_dict.custom::udict_get_ref?(16, fake_index);
      }
      data_dict~udict_set_ref(16, real_index, result);
    }
  } until (~ f);

  set_data(begin_cell().store_dict(data_dict).end_cell());
}


int is_fat(int cells, int bits) inline {
  return ((cells < 997) & (bits < 39000)) ? 0 : -1;
}


global int global_node_index;
global cell global_index_by_hash;
global slice empty_slice;
global builder empty_builder;
global int last_cells;
global int last_bits;


(tuple, int) add_to_result(tuple result, slice node_data, int node_hash, int fake_index, builder ref_indexes) inline {
  global_node_index += 1;
  int current_index = global_node_index;

  int data_bits = node_data.slice_bits();

  if (fake_index) {
    global_index_by_hash = global_index_by_hash.udict_set_builder(256, node_hash, begin_cell().store_uint(current_index, 16));
  } else {
    fake_index = current_index;
  }

  builder info_cell = begin_cell();
  ;;info_cell = info_cell.store_uint(current_index, 16);
  info_cell = info_cell.store_uint(fake_index, 16);
  info_cell = info_cell._store_builder(ref_indexes);

  ;;int result_node_cells = 2;
  int result_node_bits = 16 + 16 + ref_indexes.builder_bits();
  if (result.tlen() == 0) {
    last_cells = 4;
    last_bits = result_node_bits + data_bits;

    cell data_dict = new_dict();
    data_dict~udict_set_builder(
      16, current_index,
      begin_cell()._store_builder_ref(info_cell)._store_builder_ref(begin_cell().store_sliceF(node_data))
    );
    result~tpush(data_dict);
    return (result, current_index);
  }

  if (is_fat(last_cells + 4, last_bits + data_bits + result_node_bits)) {
    ;;int nn = result.tlen(); nn~dump();
    cell data_dict = new_dict();
    data_dict~udict_set_builder(
      16, current_index,
      begin_cell()._store_builder_ref(info_cell)._store_builder_ref(begin_cell().store_sliceF(node_data))
    );
    result~tpush(data_dict);

    last_cells = 4;
    last_bits = result_node_bits + data_bits;    
    return (result, current_index);
  }

  last_cells = last_cells + 4;
  last_bits = data_bits + result_node_bits + last_bits;

  cell data_dict = result~pop_back();
  data_dict~udict_set_builder(
    16, current_index,
    begin_cell()._store_builder_ref(info_cell)._store_builder_ref(begin_cell().store_sliceF(node_data))
  );
  result~tpush(data_dict);

  {-
  int nn = result.tlen();
  if (nn > 253) {
    dump_stack();
  }
  -}

  return (result, current_index);
}


(int, tuple) rec(cell node, tuple decomposite_result) {

  int node_hash = cell_hash(node);
  (slice cs, int f) = global_index_by_hash.udict_get?(256, node_hash);
  if (f) {
    (decomposite_result, int current_index) = add_to_result(
      decomposite_result,  ;; result
      empty_slice,         ;; node data
      node_hash,           ;; node hash uint256
      cs.preload_uint(16), ;; fake node index
      empty_builder
    );
    return (current_index, decomposite_result);
  }

  builder ref_indexes = begin_cell();
  slice node_slice = node.begin_parse();
  repeat (node_slice.slice_refs()) {
    (int ref_index, decomposite_result) = rec(
      node_slice~load_ref(),
      decomposite_result
    );
    ref_indexes = ref_indexes.store_uint(ref_index, 16);
  }

  (decomposite_result, int current_index) = add_to_result(
    decomposite_result,  ;; result
    node_slice,          ;; node data
    node_hash,           ;; node hash
    0,                   ;; fake node index
    ref_indexes          ;; child indexes
  );

  return (current_index, decomposite_result);
}


;; testable
tuple decomposite(cell big_cell, slice destination_address) method_id {
  int global_node_index = 0;                                  ;; init
  cell global_index_by_hash = new_dict();                     ;; global
  slice empty_slice = begin_cell().end_cell().begin_parse();  ;; vars
  builder empty_builder = begin_cell();
  int last_cells = 0;
  int last_bits = 0;

  (int head_index, tuple rec_result) = rec(big_cell, empty_tuple());

  int i = 0;
  tuple decomposite_result = empty_tuple();
  repeat (rec_result.tlen()) {
    decomposite_result~tpush(
      begin_cell()
        .store_uint(0, 1)
        .store_dict(rec_result.at(i))
      .end_cell()
    );
    i += 1;
  }
  decomposite_result~tpush(
    begin_cell()
      .store_uint(1, 1).store_uint(head_index, 16)
      .store_sliceF(destination_address)
    .end_cell()
  );
  return decomposite_result;
}
