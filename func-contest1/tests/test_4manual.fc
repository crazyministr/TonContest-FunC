cell message_packing(int op, int key, int valid_until_shift, int value) inline method_id {
    cell msg_body_cell = begin_cell().store_uint(value, 32).end_cell();
    slice msg_body = msg_body_cell.begin_parse();
    cell message = begin_cell()                           ;; external message body
            .store_uint(op, 32)                           ;; op
            .store_uint(0, 64)                            ;; query_id
            .store_uint(key, 256)                         ;; key
            .store_uint(now() + valid_until_shift, 64)    ;; unixtime (valid_until)
            .store_slice(msg_body)                        ;; value
         .end_cell();
    return message;
}


;; Each test function must specify method_id
;; Test functions method_id need to started from 0

;; Each test functions must to be in pairs
;; First funtion expect nothing in arguments
;; But need to return:
;;        function selector - which function to test, e.g. 0 for recv_internal, -1 recv_external, 85143 for seqno, and so on
;;        tuple - stack values needed to be passed to function in tuple
;;        c4 cell - start data of smart contract
;;        c7 tuple / null
;;        gas limit integer / null

[int, tuple, cell, tuple, int] test_op=1_1r_data() method_id(0) {
    ;; Funtion to run (recv_internal)
    int function_selector = 0;

    ;;                             op  key  shit     value
    cell message = message_packing(1,  1,   1000000, 13);
    ;; int balance, int msg_value, cell in_msg_full, slice in_msg_body
    tuple stack = unsafe_tuple([0, 0, message, message.begin_parse()]); ;; stack that will be passed to function

    cell data = begin_cell().end_cell(); ;; initial data of contract

    return [function_selector, stack, data, get_c7(), null()];
}


;; After test data function
;; We need to define test funtion
;; It will accept:
;;        exit code - exit code of runvm, here you can check errors / not
;;        c4 cell - data of smart contract after runvm invokes
;;        tuple - stack values of smart contract
;;        c5 cell - here you can check all outcoming messages
;;        gas - gas that was used
;; By default test is passed
;; You can use throw_if to fail test
_ test_op=1_1r(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(1) {
    throw_if(100, exit_code != 0); ;; test need to be passed
    throw_if(102, gas > 1000000); ;; check if gas usage is not so big
}


[int, tuple, cell, tuple, int] test_op=1_2r_data() method_id(2) {
    int function_selector = 0;
    ;;                             op  key  shit     value
    cell message = message_packing(1,  2, - 1000000, 14);
    tuple stack = unsafe_tuple([0, 0, message, message.begin_parse()]); ;; stack that will be passed to function
    return [function_selector, stack, get_prev_c4(), get_c7(), null()];
}

_ test_op=1_2r(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(3) {
    throw_if(100, exit_code != 0); ;; test need to be passed
    throw_if(102, gas > 1000000); ;; check if gas usage is not so big
}


[int, tuple, cell, tuple, int] test_op=2_1r_data() method_id(4) {
    int function_selector = 0;
    ;;                             op 
    cell message = message_packing(2, 0, 0, 0);
    tuple stack = unsafe_tuple([0, 0, message, message.begin_parse()]); ;; stack that will be passed to function
    return [function_selector, stack, get_prev_c4(), get_c7(), null()];
}

_ test_op=2_1r(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(5) {
    throw_if(100, exit_code != 0); ;; test need to be passed
    throw_if(102, gas > 1000000); ;; check if gas usage is not so big
}


;; 127977 get_key
;; GET method test
[int, tuple, cell, tuple, int] test_get_total_data() method_id(6) {
    int function_selector = 127977;  ;; funtion to run (127977 is get_key)
    ;;                                      key   data           
    return [function_selector, unsafe_tuple([1]), get_prev_c4(), get_c7(), null()];
}

_ test_get_total(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(7) {
    throw_if(103, exit_code != 0); ;; test need to be passed

    var valid_until = first(stack);
    var value = second(stack);
    throw_if(104, valid_until != now() + 1000000);
    throw_if(105, value~load_uint(32) != 13);
}

