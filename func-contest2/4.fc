{-

  TASK 4 - (De)Serialize to Cell
  Write the methods
    a) for serialization of tuple of arbitrary values of different types to Cell
    b) for deserialization of Cell created by method above to original tuple

  `serialize` method gets as input tuple with arbitrary number of elements from 0
  to 128 (both 0 and 128 elements are allowed) and outputs Cell. Elements of the
  tuple may be `null`, `int`, `cell`, `slice`, `tuple` (with the same limitations
  as original tuple). It is guaranteed that the maximum nesting level of tuples
  is less than 4 and total number of elements less than 1024.
  `deserialize` method gets a cell produced by `serialize` method and should
  return origin tuple.

  Note, for illustrative purposes`serialize_t3` and `deserialize_t3` functions
  which serialize and deserialize tuple with exactly 3 elements
  (only null, int, cell and slice are supportd) to/from a cell  have been added.
  Participants are free to not use logic from there and come up with their own
  implementations.

  Tests will only check that test_tuple == deserialize(serialize(test_tuple)).
  Intermediate representation can be arbitrary.
-}


() recv_internal() {
}


global int dict_key;


;; Dirty hack for tuple iteration!
(tuple) reverse_tuple(tuple t) {
    tuple rtuple = empty_tuple();
    int n = tuple_length(t);
    repeat(n) {
        var last = t~tpop();
        rtuple~tpush(last);
    }
    return rtuple;
}

(cell) _seialize(cell result, var x) method_id {
    dict_key += 1;

    if (is_null(x)) {
        result~udict_set_builder(32, dict_key, begin_cell().store_uint(1, 3));
    }
    if (is_int(x)) {
        int i_x = force_cast_to_int(x);
        result~udict_set_builder(32, dict_key, begin_cell().store_uint(2, 3).store_int(i_x, 257));
    }
    if (is_cell(x)) {
        cell c_x = force_cast_to_cell(x);
        result~udict_set_builder(32, dict_key, begin_cell().store_uint(3, 3).store_ref(c_x));
    }
    if (is_slice(x)) {
        slice s_x = force_cast_to_slice(x);
        result~udict_set_builder(32, dict_key, begin_cell().store_uint(4, 3).store_slice(s_x));
    }
    if (is_tuple(x)) {
        tuple t_x = force_cast_to_tuple(x);

        ;; start of inner tuple
        result~udict_set_builder(32, dict_key, begin_cell().store_uint(5, 3));

        int n = tuple_length(t_x);
        t_x = reverse_tuple(t_x);
        repeat(n) {
            var next = t_x~tpop();
            result = _seialize(result, next);
        }

        ;; end of inner tuple
        dict_key += 1;
        result~udict_set_builder(32, dict_key, begin_cell().store_uint(6, 3));
    }

    return result;
}

;; testable
(cell) serialize(tuple values) method_id {
    dict_key = 0;
    cell result = new_dict();

    result = _seialize(result, values);
    return result;
}

(tuple) add_to_stack(tuple stack, var value) method_id {
    {-
    WHYY ????????!!!!!! TELL ME WHYYY ???

    error: cannot apply function add_to_stack : (tuple, int) -> tuple to arguments of type (tuple, cell): cannot unify type cell with int
                  stack = add_to_stack(stack, cs~load_ref());

    okay ... gonna do code duplication
    -}
    tuple last = stack~tpop();
    last~tpush(value);
    stack~tpush(last);
    return stack;
}

;; testable
(tuple) deserialize(cell serialized) method_id {
    tuple stack = empty_tuple();
    int depth = 0;

    int key = -1;
    do {
        (key, slice cs, int f) = serialized.udict_get_next?(32, key);
        if (f) {
            int elem_type = cs~load_uint(3);
            if (elem_type == 1) {
                ;;stack = add_to_stack(stack, null());
                tuple last = stack~tpop();
                last~tpush(null());
                stack~tpush(last);

            }
            elseif (elem_type == 2) {
                ;;stack = add_to_stack(stack, cs~load_int(257));
                tuple last = stack~tpop();
                last~tpush(cs~load_int(257));
                stack~tpush(last);

            }
            elseif (elem_type == 3) {
                ;;stack = add_to_stack(stack, cs~load_ref());
                tuple last = stack~tpop();
                last~tpush(cs~load_ref());
                stack~tpush(last);
            }
            elseif (elem_type == 4) {
                ;;stack = add_to_stack(stack, cs);
                tuple last = stack~tpop();
                last~tpush(cs);
                stack~tpush(last);
            }
            if (elem_type == 5) {  ;; start of inner tuple
                stack~tpush(empty_tuple());
                depth += 1;
            }
            if (elem_type == 6) {  ;; end of inner tuple
                depth -= 1;
                if (depth > 0) {
                    tuple last = stack~tpop();
                    tuple prev = stack~tpop();
                    prev~tpush(last);
                    stack~tpush(prev);
                }
            }

        }
    } until (~ f);

    return first(stack);
}
