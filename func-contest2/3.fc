{-

  TASK 3 - Message validation.
  Write the method that checks that cell contains valid message
  in accordance to https://github.com/ton-blockchain/ton/blob/master/crypto/block/block.tlb#L155
  Note, tests will only cover valid and invalid MessageAny objects,
  valid MessageRelaxed (which are not simultaneously MessageAny) will not be presented
  If message is invalid for any reason - method should return (0, null), otherwise
  it should return (-1, [slice src, slice dest, int amount] ), where src, dest and
  amount represents source of the message, destination of the message and attached
  amount of TONs. If any of those values are not presented (or presented as
  addr_none slice) in the message cell - they should be substituted with null.
  It is guaranteed that for all tests any HashmapE datatype in message structure
  is empty hashmaps (has hme_empty constructor).
  Documentation on TL-B schemes can be found in https://ton.org/docs/#/overviews/TL-B
-}

() recv_internal() {
}

int equal_slices (slice a, slice b) asm "SDEQ";
forall X -> tuple unsafe_tuple2(X x) asm "NOP";

int can_load_msg_addr(slice s) asm "<{ TRY:<{ LDMSGADDR DROP -1 PUSHINT }>CATCH<{ 2DROP 0 PUSHINT }> }>CONT 1 1 CALLXARGS";
int can_load_coins(slice s) asm "<{ TRY:<{ LDVARUINT16 DROP -1 PUSHINT }>CATCH<{ 2DROP 0 PUSHINT }> }>CONT 1 1 CALLXARGS";
int can_load_ref(slice s) asm "<{ TRY:<{ LDREF DROP -1 PUSHINT }>CATCH<{ 2DROP 0 PUSHINT }> }>CONT 1 1 CALLXARGS";
int can_parse_addr(slice s) asm "<{ TRY:<{ PARSEMSGADDR DROP -1 PUSHINT }>CATCH<{ 2DROP 0 PUSHINT }> }>CONT 1 1 CALLXARGS";

;; valid_addr_type:
;;    0: MsgAddressExt
;;    1: MsgAddressInt
(slice, slice, int) try_parse_addr(slice cs, int valid_addr_type) {
    int success = can_load_msg_addr(cs);

    ifnot (success) {
        return (cs, null(), 0);
    }

    slice addr = cs~load_msg_addr();

    success = can_parse_addr(addr);
    ifnot (success) {
        return (cs, null(), 0);
    }

    tuple t_addr = parse_addr(addr);
    int addr_type = first(t_addr);
    if (
        ((valid_addr_type == 0) & (addr_type != 0) & (addr_type != 1))
        |
        ((valid_addr_type == 1) & (addr_type != 2) & (addr_type != 3))
    ) {
        return (cs, null(), 0);
    }

    if (addr_type == 0) {
        addr = null();
    }
    return (cs, addr, -1);
}

(slice, int, int) try_parse_coins(slice cs) {
    int success = can_load_coins(cs);
    ifnot(success) {
        return (cs, 0, 0);
    }
    int amount = cs~load_coins();
    return (cs, amount, -1);
}

(slice, cell, int) try_load_ref(slice cs) {
    int success = can_load_ref(cs);
    ifnot (success) {
        return (cs, null(), 0);
    }
    cell cell_ref = cs~load_ref();
    return (cs, cell_ref, -1);
}

(slice, int) try_load_slice(slice cs) {
    if (cs.slice_empty?()) {
        return (cs, 0);
    }
    return (cs, -1);
}

(slice, int) validate_state_init(slice cs) {
    {-

    tick_tock$_ tick:Bool tock:Bool = TickTock;
    _ split_depth:(Maybe (## 5)) special:(Maybe TickTock)
        code:(Maybe ^Cell) data:(Maybe ^Cell)
        library:(HashmapE 256 SimpleLib) = StateInit;
    -}

    int success = -1;

    int maybe = 0;
    ;; split_depth
    if (cs.slice_bits() < 1) {
        return (cs, 0);
    }
    maybe = cs~load_uint(1);
    if (maybe) {
        if (cs.slice_bits() < 5) {
            success = 0;
        } else {
            cs~skip_bits(5);
        }
    }
    ifnot (success) {
        return (cs, 0);
    }

    ;; special
    if (cs.slice_bits() < 1) {
        return (cs, 0);
    }
    maybe = cs~load_uint(1);
    if (maybe) {
        if (cs.slice_bits() < 2) {
            success = 0;
        } else {
            cs~skip_bits(2);
        }
    }
    ifnot (success) {
        return (cs, 0);
    }

    ;; code
    if (cs.slice_bits() < 1) {
        return (cs, 0);
    }
    maybe = cs~load_uint(1);
    if (maybe) {
        (cs, _, success) = try_load_ref(cs);
    }
    ifnot (success) {
        return (cs, 0);
    }

    ;; data
    if (cs.slice_bits() < 1) {
        return (cs, 0);
    }
    maybe = cs~load_uint(1);
    if (maybe) {
        (cs, _, success) = try_load_ref(cs);
    }
    ifnot (success) {
        return (cs, 0);
    }

    ;; library
    if (cs.slice_bits() < 1) {
        return (cs, 0);
    }
    cs~skip_bits(1);

    return (cs, -1);

}

(int) validate_extra_data(slice cs) {
    {-
    message$_ {X:Type} info:CommonMsgInfo
        init:(Maybe (Either StateInit ^StateInit))
        body:(Either X ^X) = Message X;
    -}
    if (cs.slice_bits() < 2) {
        return 0;
    }

    int success = -1;

    int init = cs~load_uint(1);  ;; init
    if (init) {
        if (cs.slice_bits() > 0) {
            int is_ref_init = cs~load_uint(1);  ;; (Either)

            if (is_ref_init) {
                (cs, cell ref, success) = try_load_ref(cs);
                if (success) {
                    slice data = ref.begin_parse();
                    (_, success) = validate_state_init(data);
                }
            } else {
                (cs, success) = validate_state_init(cs);
            }
        }
    }
    ifnot (success) {
        return 0;
    }

    int is_ref_body = cs~load_uint(1);  ;; (Either)

    if (is_ref_body) {
        (cs, _, success) = try_load_ref(cs);
    }
    return success;
}

(int, tuple) is_int_msg_info(slice cs) {
    {-
    int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool
        src:MsgAddressInt dest:MsgAddressInt 
        value:CurrencyCollection ihr_fee:Grams fwd_fee:Grams
        created_lt:uint64 created_at:uint32 = CommonMsgInfo;
    -}

    if (cs.slice_bits() < 4) {
        return (0, null());
    }

    int success = 0;

    int first = cs~load_uint(1);
    ifnot (first == 0) {
        return (0, null());
    }
    cs~skip_bits(3);

    (cs, slice src, success) = try_parse_addr(cs, 1);
    ifnot (success) {
        return (0, null());
    }

    (cs, slice dst, success) = try_parse_addr(cs, 1);
    ifnot (success) {
        return (0, null());
    }

    (cs, int amount, success) = try_parse_coins(cs);
    ifnot (success) {
        return (0, null());
    }

    if (cs.slice_bits() < 1) {
        return (0, null());
    }
    cs~skip_bits(1);  ;; ExtraCurrencyCollection

    ;; ihr_fee & fwd_fee
    (cs, _, success) = try_parse_coins(cs);
    ifnot (success) {
        return (0, null());
    }        
    (cs, _, success) = try_parse_coins(cs);
    ifnot (success) {
        return (0, null());
    }        

    int metadata_bits = 64 + 32;
    if (cs.slice_bits() < metadata_bits) {
        return (0, null());
    }
    cs~skip_bits(metadata_bits);

    success = validate_extra_data(cs);
    ifnot (success) {
        return (0, null());
    }

    return (-1, unsafe_tuple2([src, dst, amount]));
}

(int, tuple) is_ext_in_msg_info(slice cs) {
    {-
    ext_in_msg_info$10 src:MsgAddressExt dest:MsgAddressInt 
        import_fee:Grams = CommonMsgInfo;
    -}

    if (cs.slice_bits() < 2) {
        return (0, null());
    }

    int success = 0;

    int first = cs~load_uint(2);
    ifnot (first == 2) {
        return (0, null());
    }

    (cs, slice src, success) = try_parse_addr(cs, 0);
    ifnot (success) {
        return (0, null());
    }

    (cs, slice dst, success) = try_parse_addr(cs, 1);
    ifnot (success) {
        return (0, null());
    }

    (cs, _, success) = try_parse_coins(cs);
    ifnot (success) {
        return (0, null());
    }

    success = validate_extra_data(cs);

    return (-1, unsafe_tuple2([src, dst, null()]));
}

(int, tuple) is_ext_out_msg_info(slice cs) {
    {-
    ext_out_msg_info$11 src:MsgAddressInt dest:MsgAddressExt
        created_lt:uint64 created_at:uint32 = CommonMsgInfo;
    -}

    if (cs.slice_bits() < 2) {
        return (0, null());
    }

    int success = 0;

    int first = cs~load_uint(2);
    ifnot (first == 3) {
        return (0, null());
    }

    (cs, slice src, success) = try_parse_addr(cs, 1);
    ifnot (success) {
        return (0, null());
    }

    (cs, slice dst, success) = try_parse_addr(cs, 0);
    ifnot (success) {
        return (0, null());
    }

    int metadata_bits = 64 + 32;
    if (cs.slice_bits() < metadata_bits) {
        return (0, null());
    }
    cs~skip_bits(metadata_bits);

    success = validate_extra_data(cs);
    ifnot (success) {
        return (0, null());
    }

    return (-1, unsafe_tuple2([src, dst, null()]));
}


;; testable
(int, tuple) validate_message(cell message) method_id {

    slice cs = message.begin_parse();

    int success = 0;

    (success, tuple result1) = is_int_msg_info(cs);
    if (success) {
        return (-1, result1);
    }

    (success, tuple result2) = is_ext_in_msg_info(cs);
    if (success) {
        return (-1, result2);
    }

    (success, tuple result3) = is_ext_out_msg_info(cs);
    if (success) {
        return (-1, result3);
    }

    return (0, null());
}
