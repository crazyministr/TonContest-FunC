int equal_slices (slice a, slice b) asm "SDEQ";

slice get_example_address(int variant) impure method_id {
    ;;   addr_std$10 anycast:(Maybe Anycast)
    ;;   workchain_id:int8 address:bits256  = MsgAddressInt;

    var address = 0;

    if (variant == 0){
        return begin_cell().store_uint(0, 2).end_cell().begin_parse();
    }

    if (variant == 1){
        ;; this is example 256 bit address (bytes -> hex -> int)
        address = 60163661047215979614107269706106999090098320919312114703353135169949281596933;
    }
    if (variant == 2){
        address = 50163661047215979614107269706106999090098320919312114703353135169949281596933;
    }

    slice address_cell =  begin_cell()
        .store_uint(2, 2) ;; addr_std$10
        .store_uint(0, 1) ;; anycast nothing
        .store_int(-1, 8) ;; workchain_id: -1
        .store_uint(address, 256)
        .end_cell()
        .begin_parse();

    return address_cell;
}


slice get_invalid_address() impure method_id {
    slice address_cell =  begin_cell()
        .store_uint(3, 3)
        .end_cell()
        .begin_parse();

    return address_cell;
}

cell build_message(slice src, slice dst, int ton_amount) impure method_id {
    var msg = begin_cell()
            .store_uint(0, 1) ;; int_msg_info$0
            .store_uint(0, 1) ;; ihr_disabled:Bool
            .store_uint(0, 1) ;; bounce:Bool
            .store_uint(0, 1) ;; bounced:Bool
            .store_slice(src) ;; src:MsgAddressInt
            .store_slice(dst) ;; dest:MsgAddressInt
            .store_grams(ton_amount) ;;
            .store_dict(null()) ;; extra currencies
            .store_grams(0) ;; ihr_fee
            .store_grams(0) ;; fwd_fee
            .store_uint(1000, 64) ;; created_lt:uint64
            .store_uint(1000, 32) ;; created_at:uint32
            .store_uint(0, 1)  ;; no init_state
            .store_uint(1, 1)
            .store_ref(begin_cell().end_cell());
            ;;.store_slice(begin_cell().end_cell().begin_parse());

    return msg.end_cell();
}


[int, tuple, cell, tuple, int] test_valid_data() method_id(0) {
    int function_selector = 107371; 

    slice src = get_example_address(1);
    slice dst = get_example_address(1);

    tuple stack = unsafe_tuple([
        build_message(src, dst, 100)
    ]);

    return [function_selector, stack, begin_cell().end_cell(), get_c7(), null()];
}

_ test_valid(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(1) {
    throw_if(100, exit_code != 0);

    int f = first(stack); 
    var res = second(stack);
	
    throw_unless(101, is_tuple(res)); 
    res = force_cast_to_tuple(res);
    throw_if(102, tuple_length(res) != 3);
}


[int, tuple, cell, tuple, int] test_valid2_data() method_id(2) {
    int function_selector = 107371; 

    slice src = get_example_address(2);
    slice dst = get_example_address(1);

    tuple stack = unsafe_tuple([
        build_message(src, dst, 0)
    ]);

    return [function_selector, stack, begin_cell().end_cell(), get_c7(), null()];
}

_ test_valid2(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(3) {
    throw_if(100, exit_code != 0);

    int f = first(stack); 
    tuple res = second(stack);
	
    throw_unless(101, is_tuple(res)); 
    res = force_cast_to_tuple(res);
    throw_unless(102, tuple_length(res) == 3);
}


[int, tuple, cell, tuple, int] test_invalid_data() method_id(4) {
    int function_selector = 107371;

    slice src = get_invalid_address();
    slice dst = get_example_address(1);

    tuple stack = unsafe_tuple([
        build_message(src, dst, 100)
    ]);

    return [function_selector, stack, begin_cell().end_cell(), get_c7(), null()];
}


_ test_invalid(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(5) {
    throw_if(100, exit_code != 0);

    int f = first(stack); 
    var res = second(stack);
	
    throw_if(101, is_null(res) == 0); 
}

;; can remove or rewtite this test!
[int, tuple, cell, tuple, int] test_invalid_cell_intead_of_uint_data() method_id(6) {
    int function_selector = 107371;

    slice src = get_example_address(1);
    slice dst = get_example_address(1);

    cell msg = begin_cell()
            .store_uint(0, 1) ;; int_msg_info$0
            .store_uint(0, 1) ;; ihr_disabled:Bool
            .store_uint(0, 1) ;; bounce:Bool
            .store_uint(0, 1) ;; bounced:Bool
            .store_slice(src) ;; src:MsgAddressInt
            .store_slice(dst) ;; dest:MsgAddressInt
            .store_grams(13) ;;
            .store_dict(null()) ;; extra currencies
            .store_ref(begin_cell().store_uint(1, 1).end_cell())  ;; INVALID STUFF
            .store_grams(0) ;; ihr_fee
            .store_grams(0) ;; fwd_fee
            .store_uint(1000, 64) ;; created_lt:uint64
            .store_uint(1000, 32) ;; created_at:uint32
            .store_uint(0, 1)  ;; no init_state
            .store_uint(1, 1)
            .store_ref(begin_cell().end_cell())
            ;;.store_slice(begin_cell().end_cell().begin_parse());
            .end_cell();

    tuple stack = unsafe_tuple([msg]);

    return [function_selector, stack, begin_cell().end_cell(), get_c7(), null()];
}

_ test_invalid_cell_intead_of_uint(int exit_code, cell data, tuple stack, cell actions, int gas) method_id(7) {
    throw_if(100, exit_code != 0);

    int f = first(stack); 
    var res = second(stack);
	
    throw_unless(101, is_null(res));
}
