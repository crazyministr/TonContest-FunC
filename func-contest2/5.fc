{-

  TASK 5 - Address encoder
  Write the method that for any valid MsgAddressInt with addr_std constructor
  without anycast
  (see https://github.com/ton-blockchain/ton/blob/master/crypto/block/block.tlb#L105)
 returns the slice that contain ASCII encoded base64url user-friendly bouncable
 address (without test-only flag), see https://ton.org/docs/#/howto/step-by-step?id=_1-smart-contract-addresses
-}

() recv_internal() {
}

;;forall X -> tuple unsafe_tuple2(X x) asm "NOP";
slice alphabet() asm "<b 124 word ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_| $, b> <s PUSHSLICE";
{-
slice minus() asm "<b 124 word -| $, b> <s PUSHSLICE";
slice a() asm "<b 124 word a| $, b> <s PUSHSLICE";
int equal_slices(slice a, slice b) asm "SDEQ";
-}

int get_alphabet_char(int idx) {
    slice alpha = alphabet();
    int res = 0;
    repeat(idx + 1) {
        res = alpha~load_uint(8);  ;; load next char
    }
    return res;
}

int elem_by_index(cell d, int key) {
    (slice value, _) = d.udict_get?(32, key);
    return value~load_uint(16);
}

cell generate_crc16_table() {
    cell d = new_dict();
    int key = -1;
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x0000, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x1021, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x2042, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x3063, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x4084, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x50a5, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x60c6, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x70e7, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x8108, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x9129, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xa14a, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xb16b, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xc18c, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xd1ad, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xe1ce, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xf1ef, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x1231, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x0210, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x3273, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x2252, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x52b5, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x4294, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x72f7, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x62d6, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x9339, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x8318, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xb37b, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xa35a, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xd3bd, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xc39c, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xf3ff, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xe3de, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x2462, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x3443, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x0420, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x1401, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x64e6, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x74c7, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x44a4, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x5485, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xa56a, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xb54b, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x8528, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x9509, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xe5ee, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xf5cf, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xc5ac, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xd58d, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x3653, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x2672, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x1611, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x0630, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x76d7, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x66f6, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x5695, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x46b4, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xb75b, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xa77a, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x9719, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x8738, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xf7df, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xe7fe, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xd79d, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xc7bc, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x48c4, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x58e5, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x6886, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x78a7, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x0840, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x1861, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x2802, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x3823, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xc9cc, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xd9ed, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xe98e, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xf9af, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x8948, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x9969, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xa90a, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xb92b, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x5af5, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x4ad4, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x7ab7, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x6a96, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x1a71, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x0a50, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x3a33, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x2a12, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xdbfd, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xcbdc, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xfbbf, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xeb9e, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x9b79, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x8b58, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xbb3b, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xab1a, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x6ca6, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x7c87, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x4ce4, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x5cc5, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x2c22, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x3c03, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x0c60, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x1c41, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xedae, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xfd8f, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xcdec, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xddcd, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xad2a, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xbd0b, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x8d68, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x9d49, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x7e97, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x6eb6, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x5ed5, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x4ef4, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x3e13, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x2e32, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x1e51, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x0e70, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xff9f, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xefbe, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xdfdd, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xcffc, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xbf1b, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xaf3a, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x9f59, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x8f78, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x9188, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x81a9, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xb1ca, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xa1eb, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xd10c, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xc12d, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xf14e, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xe16f, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x1080, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x00a1, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x30c2, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x20e3, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x5004, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x4025, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x7046, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x6067, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x83b9, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x9398, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xa3fb, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xb3da, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xc33d, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xd31c, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xe37f, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xf35e, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x02b1, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x1290, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x22f3, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x32d2, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x4235, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x5214, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x6277, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x7256, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xb5ea, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xa5cb, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x95a8, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x8589, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xf56e, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xe54f, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xd52c, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xc50d, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x34e2, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x24c3, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x14a0, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x0481, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x7466, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x6447, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x5424, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x4405, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xa7db, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xb7fa, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x8799, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x97b8, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xe75f, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xf77e, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xc71d, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xd73c, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x26d3, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x36f2, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x0691, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x16b0, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x6657, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x7676, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x4615, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x5634, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xd94c, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xc96d, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xf90e, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xe92f, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x99c8, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x89e9, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xb98a, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xa9ab, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x5844, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x4865, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x7806, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x6827, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x18c0, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x08e1, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x3882, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x28a3, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xcb7d, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xdb5c, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xeb3f, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xfb1e, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x8bf9, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x9bd8, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xabbb, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xbb9a, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x4a75, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x5a54, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x6a37, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x7a16, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x0af1, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x1ad0, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x2ab3, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x3a92, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xfd2e, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xed0f, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xdd6c, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xcd4d, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xbdaa, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xad8b, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x9de8, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x8dc9, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x7c26, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x6c07, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x5c64, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x4c45, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x3ca2, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x2c83, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x1ce0, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x0cc1, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xef1f, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xff3e, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xcf5d, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xdf7c, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xaf9b, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0xbfba, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x8fd9, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x9ff8, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x6e17, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x7e36, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x4e55, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x5e74, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x2e93, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x3eb2, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x0ed1, 16));
    key += 1; d~udict_set_builder(32, key, begin_cell().store_uint(0x1ef0, 16));

    return d;
}

int calc_crc16(int wc, int addr) {
    ;; https://github.com/gtrafimenkov/pycrc16/blob/master/python3x/crc16/crc16pure.py#L72

    cell table = generate_crc16_table();

    slice bytes = begin_cell()
        .store_uint(0x11, 8)   ;; bouncable
        .store_int(wc, 8)      ;; workchain_id
        .store_uint(addr, 256) ;; address
        .end_cell()
        .begin_parse();

    int crc = 0;    
    repeat(34) {  ;; (256 + 8 + 8) / 8 = 34
        int byte = bytes~load_uint(8);
        int idx = ((crc >> 8) & 0xff) ^ byte;
        crc = ((crc << 8) & 0xff00) ^ elem_by_index(table, idx);
    }
    return crc & 0xffff;
}

;; testable
(slice) encode_address(slice Address) method_id {
    (int wc, int addr) = parse_std_addr(Address);

    int crc16 = calc_crc16(wc, addr);

    slice user_friendly_addr = begin_cell()
        .store_uint(0x11, 8)   ;; bouncable
        .store_int(wc, 8)      ;; workchain_id
        .store_uint(addr, 256) ;; address
        .store_uint(crc16, 16) ;; CRC16-CCITT
        .end_cell()
        .begin_parse();

    builder base64url_builder = begin_cell();

    repeat(48) {
        int next_char_idx = user_friendly_addr~load_uint(6);
        int char = get_alphabet_char(next_char_idx);
        
        base64url_builder = base64url_builder.store_slice(
            begin_cell().store_uint(char, 8).end_cell().begin_parse()
        );
    }

    cell base64url = base64url_builder.end_cell();
    return base64url.begin_parse();
}
